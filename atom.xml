<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mazhuang19981201.github.io/</id>
    <title>马壮的博客</title>
    <updated>2020-08-04T05:08:19.375Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mazhuang19981201.github.io/"/>
    <link rel="self" href="https://mazhuang19981201.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mazhuang19981201.github.io//images/avatar.png</logo>
    <icon>https://mazhuang19981201.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, 马壮的博客</rights>
    <entry>
        <title type="html"><![CDATA[Linux相关知识点]]></title>
        <id>https://mazhuang19981201.github.io//post/linux-xiang-guan-zhi-shi-dian</id>
        <link href="https://mazhuang19981201.github.io//post/linux-xiang-guan-zhi-shi-dian">
        </link>
        <updated>2020-08-04T03:08:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1linux的目录结构">1.Linux的目录结构</h1>
<figure data-type="image" tabindex="1"><img src="https://mazhuang19981201.github.io//post-images/1596510704866.png" alt=""></figure>
<h1 id="2linux文件和目录管理">2.Linux文件和目录管理</h1>
<h2 id="21-绝对路径和相对路径">2.1 绝对路径和相对路径</h2>
<ul>
<li>绝对路径：由根目录写起，例如：/usr/share/doc 这个目录。</li>
<li>相对路径：不是由根目录写起，例如由/usr/share/doc要切换到/usr/share/man时，相对路径的写法就是：../man</li>
</ul>
<h1 id="3处理目录的常见命令">3.处理目录的常见命令</h1>
<h2 id="31-ls列出目录命令">3.1 ls（列出目录命令）</h2>
<ul>
<li>-a:全部的文件，连同隐藏的文件一起列出来（常用）</li>
<li>-d:仅列出目录本身，而不是列出目录内的文件数据。（常用）</li>
<li>-l:长数据串列出，包含文件的属性与权限等等数据。（常用）</li>
</ul>
<h2 id="32-cd切换目录命令">3.2 cd（切换目录命令）</h2>
<h2 id="33-pwd显示所在目录">3.3 pwd（显示所在目录）</h2>
<p>-p显示出确实的目录，而非使用连结路径。<br>
<img src="https://mazhuang19981201.github.io//post-images/1596512050846.png" alt=""></p>
<h2 id="34-mkdir创建目录">3.4 mkdir（创建目录）</h2>
<ul>
<li>-m:配置文件的权限</li>
<li>-p:帮助你直接将你想要建立的目录递归创建出来<br>
<img src="https://mazhuang19981201.github.io//post-images/1596512513452.png" alt=""></li>
</ul>
<h2 id="35-rmdir删除空的目录">3.5 rmdir（删除空的目录）</h2>
<h2 id="36-cp复制文件或者目录">3.6 cp（复制文件或者目录）</h2>
<ul>
<li>-a:相当於-pdr的意思，至於pdr请参考下列说明; (常用)</li>
<li>-d :若来源档为连结档的属性(ink fle) ,则复制连结档属性而非文件本身;</li>
<li>-f :为强制(force)的意思,若目标文件已经存在且无法开启，则移除后再尝试一次;</li>
<li>-i:若目标档(destination)已经存在时,在覆盖时会先询问动作的进行(常用)。</li>
<li>-1 :进行硬式连结(hard link)的连结档创建,而非复制文件本身 ;</li>
<li>-p :连同文件的属性- 起复制过去,而非使用默认属性(备份常用) ;</li>
<li>-r:递归持续复制,用於目录的复制行为;(常用)</li>
<li>-s:复制成为符号连结档(symbolic link) ,亦即「捷径]文件;</li>
<li>-u :若destination比source旧才升级destination !</li>
</ul>
<h2 id="37-rm移除文件或者是目录">3.7 rm（移除文件或者是目录）</h2>
<ul>
<li>-f:就是force的意思，忽略不存在的文件，不会出现警告的信息。</li>
<li>-i:互动模式，在删除前会询问使用者是否动作。</li>
<li>-r:递归删除，最常用的是目录的删除，这是非常危险的选项。</li>
</ul>
<h2 id="38-mv移动文件和目录或者是修改名称">3.8 mv（移动文件和目录，或者是修改名称）</h2>
<ul>
<li>-f：就是force的意思，如果目标已经存在，不会询问直接替换。</li>
<li>-i:如果目标已经存在的话，会询问是否进行替换，</li>
</ul>
<h2 id="39-查看命令">3.9 查看命令</h2>
<ul>
<li>cat 从第一行开始查看</li>
<li>tac 从最后一行开始查看</li>
<li>more 一页一页的查看</li>
<li>less 一页一页的翻动</li>
<li>head -n 取出文件的前几行</li>
<li>tail -n 取出文件的后几行</li>
</ul>
<h1 id="4shell脚本的编写">4.Shell脚本的编写</h1>
<p>(1)执行脚本的方式<br>
首先将脚本文件作为可执行的程序，然后运行<br>
chmod +x ./test.sh<br>
./test.sh<br>
(2)shell变量的定义<br>
&lt; 1 &gt;your_name=&quot;mazhuang.club&quot;<br>
注意：变量与等号之间不可以用空格<br>
例子：将etc目录的文件名循环出来<br>
for file in &quot;ls /etc&quot; 或者是 for file in $(ls /etc)<br>
&lt; 2 &gt;使用变量,只需要在变量前面加上美元符号即可<br>
your_name=&quot;mazhuang.clud&quot;<br>
echo $your_name 或者 echo  <span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 166: …  &lt; 6 &gt;截取字符串，使用#̲号进行截取，索引从0开始，例如…'>{your_name}
     &lt; 3 &gt;只读变量，使用readonly命令，可以把变量变为只读变量，不能被修改
     &lt; 4 &gt;删除变量，使用unset命令，但是unset命令不能够删除readonly变量
     &lt; 5 &gt;拼接字符串，拼接字符串时使用单引号或者是双引号，没有加号
     &lt; 6 &gt;截取字符串，使用#号进行截取，索引从0开始，例如：
     ![](https://mazhuang19981201.github.io//post-images/1596517169624.png) 
     &lt; 7 &gt;shell数组，定义方式例如 array=(value1 value2 value3),数组定义时，用括号，并且            每个值用空格分隔，shell数组没有大小索引界限，读取shell数组例如：&quot;</span>{array[0]}&quot;,           获取数组的长度时，与字符串类似，在读取的前面加上#号即可。<br>
&lt; 8 &gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis相关知识点]]></title>
        <id>https://mazhuang19981201.github.io//post/redis-xiang-guan-zhi-shi-dian</id>
        <link href="https://mazhuang19981201.github.io//post/redis-xiang-guan-zhi-shi-dian">
        </link>
        <updated>2020-08-03T09:54:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="redis事务">Redis事务</h1>
<p>1.Redis事务的概念<br>
Redis事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中的所有命令都会被序列化。在事务执行过程中，会按照顺序串行化执行队列中的命令，其他客户端提交的命令不会插入到事务执行命令序列中。<br>
2 Redis事务中没有隔离的概念<br>
批量操作在发送Exec命令前被放入队列缓存中，并不会被实际执行，也就不存在事务内的查询要看到到事务里的更新，事务外查询不能看到。<br>
3 Redis不保证原子性<br>
Redis中，单条命令是原子性执行的，但是事务不保证原子性，并且没有回滚。事务中任意命令执行失败，其余的命令仍会执行。<br>
4 Redis事务的三个阶段</p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务<br>
5 Redis事务的相关命令<br>
watch key1 key2：监视一个或者是多个key，如果事务执行之前，被监视的key被其他的命令改动，则事务会被打断。<br>
multi：标记一个事务的开始（queued）<br>
exec：执行所有事务块的命令<br>
discard：取消事务，放弃对事务快中的所有命令。<br>
6 Redis事务执行示例：<br>
<img src="https://mazhuang19981201.github.io//post-images/1596449149278.png" alt=""></li>
</ul>
<h1 id="redis持久化">Redis持久化</h1>
<p>Redis是一个可持久化的NoSql数据库，Redis支持两种持久化方案，RDB和AOF<br>
1 RDB<br>
RDB是Redis的默认持久化策略，就是在指定的时间间隔内将内存中的数据集快照写入磁盘中，待服务重启时，将快照读入内存中。<br>
RDB的持久化策略如下图所示：<br>
<img src="https://mazhuang19981201.github.io//post-images/1596450137210.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则表达式]]></title>
        <id>https://mazhuang19981201.github.io//post/zheng-ze-biao-da-shi</id>
        <link href="https://mazhuang19981201.github.io//post/zheng-ze-biao-da-shi">
        </link>
        <updated>2020-07-13T01:35:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是正则表达式">什么是正则表达式</h1>
<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。给定一个正则表达式和另一个字符串，可以通过正则表达式从字符串中获取我们想要的特定部分。正则表达式灵活性、逻辑性和功能性非常强，可以迅速地用极简单的方式达到字符串额复杂控制，但对于共接触的人来说比较晦涩难懂。由于正则表达式主要应用对象是文本，因此他在各种文本编辑器场合都有应用。</p>
<h1 id="基本语法">基本语法</h1>
<ul>
<li>runoo+b 结果：runooob runoooob runooooob +号代表前面的字符可以出现一次或者多次</li>
<li>runoo*b 结果：runoob runooob runoooob *号代表前面的字符可以不出现，也可以出现一次或者是多次</li>
<li>runoo?b 结果：runoob runooob ?号代表前面的字符最多可以出现一次  也就是0或者1次</li>
<li>[abc]：代表a或者b，或者c字符中的一个。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 学习笔记]]></title>
        <id>https://mazhuang19981201.github.io//post/docker-xue-xi-bi-ji</id>
        <link href="https://mazhuang19981201.github.io//post/docker-xue-xi-bi-ji">
        </link>
        <updated>2020-04-10T09:55:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker的安装与启动">docker的安装与启动</h1>
<h2 id="docker-的安装">docker 的安装</h2>
<p>1.yum包更新到最新<br>
sudo yum update<br>
2.安装需要的软件包<br>
sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>
3.设置yum源为阿里云<br>
sudo yum-config-manager --add--repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>
4.安装docker<br>
sudo yum install docker-ce<br>
5.安装后查看版本<br>
docker -v</p>
<h2 id="docker的启动与停止">docker的启动与停止</h2>
<p>1.启动<br>
systemctl start docker<br>
2.停止<br>
systemctl stop docker<br>
3.查看启动状态<br>
systemctl status docker<br>
4.重新启动docker<br>
systemctl restart docker<br>
5.设置开机启动<br>
systemctl enable docker</p>
<h2 id="docker的常用命令">docker的常用命令</h2>
<p>1.查看docker中的镜像<br>
docker images<br>
2.搜索镜像<br>
docker search ...<br>
3.下载镜像<br>
docker pull ...<br>
4.删除镜像<br>
docker rmi 镜像id<br>
5.删除所有镜像<br>
docker rmi ·docker images -q·  这个引号是esc下面的符号<br>
6.创建和启动容器<br>
docker run -it --name=mycentos centos:7 /bin/bash 创建交互式容器，在使用exit退出后，docker ps 查询不到<br>
docker run -di --name=mycentos2 centos:7 创建守护时容器，使用exit退出后，也可以使用<br>
docker ps查询<br>
7.复制文件<br>
docker cp 文件名 容器名：/user/local 从宿主机拷贝到docker容器中<br>
docker cp 容器名：文件路径到文件名 宿主机路径到文件名 从docker容器中拷贝到宿主机中<br>
8.目录挂载<br>
就是宿主机和docker容器共享一个目录<br>
docker run -di -v 宿主机目录 --name=容器名 centos:7（镜像名）<br>
9.查看容器的ip<br>
docker inspect 容器名<br>
10.docker容器的备份与迁移<br>
（1）容器保存为镜像<br>
docker commit 容器名称 新镜像名称<br>
（2）镜像备份<br>
docker save -o mynginx.tar 镜像名称<br>
（3）镜像恢复<br>
docker load -i mynginx.tar</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springdata jpa学习总结]]></title>
        <id>https://mazhuang19981201.github.io//post/springdata-jpa-xue-xi-zong-jie</id>
        <link href="https://mazhuang19981201.github.io//post/springdata-jpa-xue-xi-zong-jie">
        </link>
        <updated>2020-04-05T11:45:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="jpa-的介绍">jpa 的介绍</h1>
<p>JPA的全称是Java Persistence API， 即Java 持久化API，是SUN公司推出的一套基于ORM的规范，内部是由一系列的接口和抽象类构成。<br>
JPA通过JDK 5.0注解描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</p>
<h1 id="springdata-jpa-介绍">springdata jpa 介绍</h1>
<p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据库的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！<br>
Spring Data JPA 让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现,在实际的工作工程中，推荐使用Spring Data JPA + ORM（如：hibernate）完成操作，这样在切换不同的ORM框架时提供了极大的方便，同时也使数据库层操作更加简单，方便解耦。</p>
<h2 id="springjpa快速入门">Springjpa快速入门</h2>
<p>1.依赖<br>
<properties><br>
&lt;spring.version&gt;4.2.4.RELEASE&lt;/spring.version&gt;<br>
&lt;hibernate.version&gt;5.0.7.Final&lt;/hibernate.version&gt;<br>
&lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;<br>
&lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;<br>
&lt;c3p0.version&gt;0.9.1.2&lt;/c3p0.version&gt;<br>
&lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt;<br>
</properties></p>
<pre><code>&lt;dependencies&gt;
    &lt;!-- junit单元测试 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.9&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    
    &lt;!-- spring beg --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
        &lt;version&gt;1.6.8&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    
    &lt;!-- spring end --&gt;

    &lt;!-- hibernate beg --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
        &lt;version&gt;${hibernate.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
        &lt;version&gt;5.2.1.Final&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- hibernate end --&gt;

    &lt;!-- c3p0 beg --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;c3p0&lt;/groupId&gt;
        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
        &lt;version&gt;${c3p0.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- c3p0 end --&gt;

    &lt;!-- log end --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;${log4j.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
        &lt;version&gt;${slf4j.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
        &lt;version&gt;${slf4j.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- log end --&gt;

    
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;${mysql.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
        &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
        &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    
    &lt;!-- el beg 使用spring data jpa 必须引入 --&gt;
    &lt;dependency&gt;  
        &lt;groupId&gt;javax.el&lt;/groupId&gt;  
        &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;  
        &lt;version&gt;2.2.4&lt;/version&gt;  
    &lt;/dependency&gt;  
      
    &lt;dependency&gt;  
        &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;  
        &lt;artifactId&gt;javax.el&lt;/artifactId&gt;  
        &lt;version&gt;2.2.4&lt;/version&gt;  
    &lt;/dependency&gt; 
    &lt;!-- el end --&gt;
&lt;/dependencies&gt;
2.整合Springdata jpa和spring
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
</code></pre>
<p><beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"></p>
<pre><code>&lt;!-- 1.dataSource 配置数据库连接池--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
	&lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
	&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/jpa&quot; /&gt;
	&lt;property name=&quot;user&quot; value=&quot;root&quot; /&gt;
	&lt;property name=&quot;password&quot; value=&quot;111111&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 2.配置entityManagerFactory --&gt;
&lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;
	&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
	&lt;property name=&quot;packagesToScan&quot; value=&quot;cn.itcast.entity&quot; /&gt;
	&lt;property name=&quot;persistenceProvider&quot;&gt;
		&lt;bean class=&quot;org.hibernate.jpa.HibernatePersistenceProvider&quot; /&gt;
	&lt;/property&gt;
	&lt;!--JPA的供应商适配器--&gt;
	&lt;property name=&quot;jpaVendorAdapter&quot;&gt;
		&lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;
			&lt;property name=&quot;generateDdl&quot; value=&quot;false&quot; /&gt;
			&lt;property name=&quot;database&quot; value=&quot;MYSQL&quot; /&gt;
			&lt;property name=&quot;databasePlatform&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot; /&gt;
			&lt;property name=&quot;showSql&quot; value=&quot;true&quot; /&gt;
		&lt;/bean&gt;
	&lt;/property&gt;
	&lt;property name=&quot;jpaDialect&quot;&gt;
		&lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot; /&gt;
	&lt;/property&gt;
&lt;/bean&gt;


&lt;!-- 3.事务管理器--&gt;
&lt;!-- JPA事务管理器  --&gt;
&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;
	&lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 整合spring data jpa--&gt;
&lt;jpa:repositories base-package=&quot;cn.itcast.dao&quot;
	transaction-manager-ref=&quot;transactionManager&quot;
	entity-manager-factory-ref=&quot;entityManagerFactory&quot;&gt;&lt;/jpa:repositories&gt;
	
&lt;!-- 4.txAdvice--&gt;
&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;
	&lt;tx:attributes&gt;
		&lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;/&gt;
		&lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot;/&gt;
		&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;
		&lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;
		&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;
		&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;
		&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;
	&lt;/tx:attributes&gt;
&lt;/tx:advice&gt;

&lt;!-- 5.aop--&gt;
&lt;aop:config&gt;
	&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* cn.itcast.service.*.*(..))&quot; /&gt;
	&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pointcut&quot; /&gt;
&lt;/aop:config&gt;

&lt;context:component-scan base-package=&quot;cn.itcast&quot;&gt;&lt;/context:component-scan&gt;
	
&lt;!--组装其它 配置文件--&gt;
</code></pre>
</beans>
# 使用注解配置实体类和关系表的映射关系
@Entity //声明实体类
@Table(name="cst_customer") //建立实体类和表的映射关系
public class Customer {
<pre><code>@Id//声明当前私有属性为主键
@GeneratedValue(strategy=GenerationType.IDENTITY) //配置主键的生成策略
@Column(name=&quot;cust_id&quot;) //指定和表中cust_id字段的映射关系
private Long custId;

@Column(name=&quot;cust_name&quot;) //指定和表中cust_name字段的映射关系
private String custName;

@Column(name=&quot;cust_source&quot;)//指定和表中cust_source字段的映射关系
private String custSource;

@Column(name=&quot;cust_industry&quot;)//指定和表中cust_industry字段的映射关系
private String custIndustry;

@Column(name=&quot;cust_level&quot;)//指定和表中cust_level字段的映射关系
private String custLevel;

@Column(name=&quot;cust_address&quot;)//指定和表中cust_address字段的映射关系
private String custAddress;

@Column(name=&quot;cust_phone&quot;)//指定和表中cust_phone字段的映射关系
private String custPhone;
..... getter和setter
## 在Dao层的接口需要满足下面规范
/**
* JpaRepository&lt;实体类类型，主键类型&gt;：用来完成基本CRUD操作
* JpaSpecificationExecutor&lt;实体类类型&gt;：用于复杂查询（分页等查询操作）
*/
</code></pre>
<p>public interface CustomerDao extends JpaRepository&lt;Customer, Long&gt;, JpaSpecificationExecutor<Customer> {<br>
}</p>
<h1 id="springdata-jpa的基本crud操作">Springdata jpa的基本CRUD操作</h1>
<p>保存信息：<br>
<img src="https://mazhuang19981201.github.io//post-images/1586087843055.png" alt=""><br>
删除信息：<br>
<img src="https://mazhuang19981201.github.io//post-images/1586087879705.png" alt=""><br>
修改信息：<br>
<img src="https://mazhuang19981201.github.io//post-images/1586087925088.png" alt=""><br>
查询单个信息：<br>
<img src="https://mazhuang19981201.github.io//post-images/1586088001596.png" alt=""></p>
<h1 id="springdata-jpa的jpql操作">springdata jpa的jpql操作</h1>
<p>在执行查询时，只需要在接口的方法上面加上相应jpql语句的@Query注解，可以同参数位置，也可以在？后加入索引。<br>
<img src="https://mazhuang19981201.github.io//post-images/1586088125590.png" alt=""><br>
在执行修改操作时，在以上步骤的基础上，加入@Modifying注解<br>
<img src="https://mazhuang19981201.github.io//post-images/1586088220815.png" alt=""></p>
<h1 id="springdata-jpa-原生sql查询">Springdata jpa 原生sql查询</h1>
<figure data-type="image" tabindex="1"><img src="https://mazhuang19981201.github.io//post-images/1586088296537.png" alt=""></figure>
<h1 id="springdata-jpa-方法名查询">springdata jpa 方法名查询</h1>
<p><img src="https://mazhuang19981201.github.io//post-images/1586088498337.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088505033.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088508596.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088511984.png" alt=""></p>
<h1 id="使用specifications完成复杂查询">使用Specifications完成复杂查询</h1>
<figure data-type="image" tabindex="2"><img src="https://mazhuang19981201.github.io//post-images/1586088654073.png" alt=""></figure>
<h2 id="分页查询">分页查询</h2>
<p><img src="https://mazhuang19981201.github.io//post-images/1586088682490.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088735867.png" alt=""></p>
<h1 id="多表关系描述">多表关系描述</h1>
<p><img src="https://mazhuang19981201.github.io//post-images/1586088785835.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088821500.png" alt=""></p>
<h2 id="多对多关系">多对多关系</h2>
<p><img src="https://mazhuang19981201.github.io//post-images/1586088938099.png" alt=""><br>
<img src="https://mazhuang19981201.github.io//post-images/1586088942923.png" alt=""><br>
其他操作与hibernate类型</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多线程学习总结]]></title>
        <id>https://mazhuang19981201.github.io//post/duo-xian-cheng-xue-xi-zong-jie</id>
        <link href="https://mazhuang19981201.github.io//post/duo-xian-cheng-xue-xi-zong-jie">
        </link>
        <updated>2020-03-28T05:43:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="多线程的实现方式">多线程的实现方式</h1>
<p>1.继承Thread类，重写run方法。<br>
<img src="https://mazhuang19981201.github.io//post-images/1585374327048.png" alt=""><br>
2.实现Runable接口，重写接口中的run方法，用start方法来启动线程<br>
<img src="https://mazhuang19981201.github.io//post-images/1585374415872.png" alt=""><br>
3.Runable相对于Thread的优势<br>
（1）适合多个相同的程序代码的线程去共享一个资源<br>
（2）可以避免java中单继承的局限性<br>
（3）增加程序的健壮性，实现解耦，代码可以被多个线程共享，代码和线程独立<br>
（4）线程池只能放入实现Runable或者是Callable类线程，不能直接放入继承Thread的类</p>
<h1 id="线程安全问题解决方案">线程安全问题解决方案</h1>
<h2 id="线程同步">线程同步</h2>
<p>1.同步代码块<br>
（1）锁对象，可以是任意类型<br>
（2）多个线程对象，要使用同一把锁<br>
<img src="https://mazhuang19981201.github.io//post-images/1585374781827.png" alt=""><br>
2.同步方法<br>
（1）使用synchronized修饰的方法，保证A线程使用该方法时，其他线程只能方法外等候。<br>
（2）同步方法实际上是吧this作为锁对象<br>
<img src="https://mazhuang19981201.github.io//post-images/1585374922056.png" alt=""><br>
3.静态同步方法<br>
（1）在同步方法的基础上使用static修饰<br>
（2）静态同步方法实际上是把当前类的.class作为锁对象<br>
4.Lock锁<br>
（1） java.util. concurrent. locks . Lock机制提供了比synchronized代码块和                     synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都                     有,除此之外更强大,更体现面向对象。<br>
（2）<br>
<img src="https://mazhuang19981201.github.io//post-images/1585375228208.png" alt=""></p>
<h1 id="线程状态概述">线程状态概述</h1>
<figure data-type="image" tabindex="1"><img src="https://mazhuang19981201.github.io//post-images/1585377771710.png" alt=""></figure>
<h2 id="什么是等待唤醒机制">什么是等待唤醒机制</h2>
<pre><code> 这是多个线程间的一种协作机制。 谈到线程我们经常想到的是线程间的竞争( race ) ,比如去争夺锁,但这并不是故事的全部,线程间也会有协作机制。就好比在公司里你和你的同事们,你们可能存在在晋升时的竞争,但更多时候你们更多是一起合作以完成某些任务。
 就是在一个线程进行了规定操作后,就进入等待状态( wait() ),等待其他线程执行完他们的指定代码过后 再将其唤醒( notify() ) ;在有多个线程进行等待时，如果需要,可以使用notifAll()来唤醒所有的等待线程。
 wait/notify就是线程间的一种协作机制。
</code></pre>
<h2 id="等待唤醒中的方法">等待唤醒中的方法</h2>
<pre><code> 等待唤醒机制就是用于解决线程间通信的问题的,使用到的3个方法的含义如下:
  wait :线程不再活动,不再参与调度,进入waitset中,因此不会浪费CPU资源,也不会去竞争锁了,这时的线程状态即是WAITING。它还要等着别的线程执行一个特别的动作,也即是&quot;通知( notify )“在这个对象上等待的线程从wait set中释放出来,重新进入到调度队列( ready queue )中。
  notify :则选取所通知对象的wait set中的一个线程释放;例如,餐馆有空位置后,等候就餐最久的顾客最先入座。
  notifyAll :则释放所通知对象的wait set.上的全部线程。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java面试题第二部分（容器部分）]]></title>
        <id>https://mazhuang19981201.github.io//post/java-mian-shi-ti-di-er-bu-fen-rong-qi-bu-fen</id>
        <link href="https://mazhuang19981201.github.io//post/java-mian-shi-ti-di-er-bu-fen-rong-qi-bu-fen">
        </link>
        <updated>2020-03-28T02:59:30.000Z</updated>
        <content type="html"><![CDATA[<p>请点开下面连接进入：<br>
<a href="https://mp.weixin.qq.com/s/Yl9pTaQYKwf0rZ6InG9OZg">java容器部分面试题</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java面试题第一模块 java基础部分]]></title>
        <id>https://mazhuang19981201.github.io//post/java-mian-shi-ti-di-yi-mo-kuai-java-ji-chu-bu-fen</id>
        <link href="https://mazhuang19981201.github.io//post/java-mian-shi-ti-di-yi-mo-kuai-java-ji-chu-bu-fen">
        </link>
        <updated>2020-03-26T04:33:43.000Z</updated>
        <content type="html"><![CDATA[<p>最近在知乎上看到了一些不错的java面试题，感觉质量挺高的，在此记录一下：<br>
<a href="https://mp.weixin.qq.com/s/IBbD3CmVWsTL9ymHg6gGGA">知乎面试题第一部分</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSONView插件的坑]]></title>
        <id>https://mazhuang19981201.github.io//post/jsonview-cha-jian-de-keng</id>
        <link href="https://mazhuang19981201.github.io//post/jsonview-cha-jian-de-keng">
        </link>
        <updated>2020-03-25T16:07:11.000Z</updated>
        <content type="html"><![CDATA[<p>由于之前在测试项目时，后端的返回数据为json格式，由于直接响应的页面时，它的可读性不是很高，所以我就下载了一个插件，叫做JSONView，使用插件后自我感觉良好，显示的json的进行了格式化可读性也比较高。<br>
<img src="https://mazhuang19981201.github.io//post-images/1585152632865.png" alt=""><br>
但是之后对数据库中的信息进行添加操作时，发现了一个很奇妙的bug，就是如果在主键自增的基础上，在添加信息时，总是把相同的一个信息同时添加两条记录，在无数次查看后端代码，总是发现不了问题所在，最后在谷歌浏览器的抓包工具上发现了问题<br>
<img src="https://mazhuang19981201.github.io//post-images/1585152809741.png" alt=""><br>
JSONView插件在启动状态下，向后端发送请求时，会发送两次请求，当我把JSONView插件关闭掉之后，这个问题就不存在了。<br>
具体为什么会发送两次请求，欢迎大佬前来指点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在maven中使用tomcat插件无法启动的问题]]></title>
        <id>https://mazhuang19981201.github.io//post/zai-maven-zhong-shi-yong-tomcat-cha-jian-wu-fa-qi-dong-de-wen-ti</id>
        <link href="https://mazhuang19981201.github.io//post/zai-maven-zhong-shi-yong-tomcat-cha-jian-wu-fa-qi-dong-de-wen-ti">
        </link>
        <updated>2020-03-25T15:15:35.000Z</updated>
        <content type="html"><![CDATA[<p>在近在写一个项目的时候，突然遇到了一个问题，我的项目用本地的tomcat启动没有任何的问题，然而当我用maven的tomcat插件的时候，突然就报出了一个令我百思不得其解的错误。如下：<br>
<img src="https://mazhuang19981201.github.io//post-images/1585149723987.png" alt=""><br>
我在百度上面找了好多的解决方案还是没有找到真正的解决问题的方案。最后发现是在刚开始写程序时，在我的jdk的Java\jdk1.8.0_181\jre\lib\ext这个目录下放了servler-api.jar<br>
<img src="https://mazhuang19981201.github.io//post-images/1585150218331.png" alt=""><br>
在jdk运行时，jdk自身的servlet-api插件和maven的tomcat插件发生了冲突，删除掉jdk的servlet-api.jar就可以运行了。</p>
]]></content>
    </entry>
</feed>